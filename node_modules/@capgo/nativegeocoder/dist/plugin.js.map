{"version":3,"file":"plugin.js","sources":["esm/index.js","esm/web.js"],"sourcesContent":["import { registerPlugin } from \"@capacitor/core\";\nconst NativeGeocoder = registerPlugin(\"NativeGeocoder\", {\n    web: () => import(\"./web\").then((m) => new m.NativeGeocoderWeb()),\n});\nexport * from \"./definitions\";\nexport { NativeGeocoder };\n//# sourceMappingURL=index.js.map","import { WebPlugin } from \"@capacitor/core\";\nconst findAC = (address_components, type) => {\n    return (address_components.find((component) => component.types.includes(type)) || {\n        long_name: \"\",\n        short_name: \"\",\n        types: [],\n    });\n};\nexport class NativeGeocoderWeb extends WebPlugin {\n    async reverseGeocode(options) {\n        if (!options.apiKey) {\n            throw new Error(\"apiKey is required for web\");\n        }\n        const params = Object.assign(Object.assign({ latlng: `${options.latitude},${options.longitude}`, key: options.apiKey }, (options.defaultLocale && { language: options.defaultLocale })), { result_type: \"street_address\" });\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?${new URLSearchParams(params).toString()}`)\n            .then((response) => response.json())\n            .then((data) => {\n            return {\n                addresses: data.results\n                    .map((result) => {\n                    // transform the response in Address[]\n                    // use the result from google geocoder and transform it in Address\n                    return {\n                        latitude: result.geometry.location.lat,\n                        longitude: result.geometry.location.lng,\n                        countryCode: findAC(result.address_components, \"country\")\n                            .short_name,\n                        countryName: findAC(result.address_components, \"country\")\n                            .long_name,\n                        postalCode: findAC(result.address_components, \"postal_code\")\n                            .long_name,\n                        administrativeArea: findAC(result.address_components, \"administrative_area_level_1\").long_name,\n                        subAdministrativeArea: findAC(result.address_components, \"administrative_area_level_2\").long_name,\n                        locality: findAC(result.address_components, \"locality\")\n                            .long_name,\n                        subLocality: findAC(result.address_components, \"sublocality\")\n                            .long_name,\n                        thoroughfare: findAC(result.address_components, \"route\")\n                            .long_name,\n                        subThoroughfare: findAC(result.address_components, \"street_number\").long_name,\n                        areasOfInterest: [],\n                    };\n                })\n                    .slice(0, options.maxResults || 1),\n            };\n        });\n    }\n    async forwardGeocode(options) {\n        if (!options.apiKey) {\n            throw new Error(\"apiKey is required for web\");\n        }\n        const params = Object.assign(Object.assign({ address: options.addressString, key: options.apiKey }, (options.defaultLocale && { language: options.defaultLocale })), { result_type: \"street_address\" });\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?${new URLSearchParams(params).toString()}`)\n            .then((response) => response.json())\n            .then((data) => {\n            return {\n                addresses: data.results\n                    .map((result) => {\n                    // transform the response in Address[]\n                    // use the result from google geocoder and transform it in Address\n                    return {\n                        latitude: result.geometry.location.lat,\n                        longitude: result.geometry.location.lng,\n                        countryCode: findAC(result.address_components, \"country\")\n                            .short_name,\n                        countryName: findAC(result.address_components, \"country\")\n                            .long_name,\n                        postalCode: findAC(result.address_components, \"postal_code\")\n                            .long_name,\n                        administrativeArea: findAC(result.address_components, \"administrative_area_level_1\").long_name,\n                        subAdministrativeArea: findAC(result.address_components, \"administrative_area_level_2\").long_name,\n                        locality: findAC(result.address_components, \"locality\")\n                            .long_name,\n                        subLocality: findAC(result.address_components, \"sublocality\")\n                            .long_name,\n                        thoroughfare: findAC(result.address_components, \"route\")\n                            .long_name,\n                        subThoroughfare: findAC(result.address_components, \"street_number\").long_name,\n                        areasOfInterest: [],\n                    };\n                })\n                    .slice(0, options.maxResults || 1),\n            };\n        });\n    }\n}\n//# sourceMappingURL=web.js.map"],"names":["registerPlugin","WebPlugin"],"mappings":"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"}